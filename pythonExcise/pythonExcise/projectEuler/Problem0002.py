'''
Question 0002: https://projecteuler.net/problem=2

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.'''

# -*- coding: UTF-8 -*-

CAP_NUMBER = 4000000
#CAP_NUMBER = 200

def getResult():
    number1 = 1
    number2 = 2

    nextNumber = 0

    l = []
    l.append(number1)
    l.append(number2)
    
    evenList = []
    evenList.append(number2)

    sum = 2
    
    while nextNumber <= CAP_NUMBER:
        nextNumber = number1 + number2

        if nextNumber > CAP_NUMBER:
            break

        number1 = number2
        number2 = nextNumber
        
        l.append(nextNumber)

        if nextNumber % 2 == 0 :        #either one is correct but not both
            sum = sum + number2
            evenList.append(nextNumber)
    
    print (l)
    print (evenList)
    return sum
    

print ("\n************* Solution 1 starts ************\n")
print (getResult())
print ("\n************* Solution 1 ends ************\n")

print ("\n************* Solution 2 starts ************\n")

Fibonacci = [1, 2]          # 这里Fibonnacci 只是数组名

while (Fibonacci[-1] + Fibonacci[-2]) < 4000000:
    Fibonacci.append(Fibonacci[-1] + Fibonacci[-2])

even_F = [i for i in Fibonacci if i % 2 == 0]

print(sum(even_F))
print ("\n************* Solution 2 ends ************\n")


